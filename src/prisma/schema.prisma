generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

enum VehicleType {
    CAR
    MOTORCYCLE
    TRUCK
}

enum Size { 
    SMALL 
    MEDIUM 
    LARGE
 }

enum SlotStatus { 
    AVAILABLE 
    OCCUPIED
    RESERVED
    MAINTENANCE
 }

enum RequestStatus { 
    PENDING 
    APPROVED 
    REJECTED 
}

enum Location { 
    NORTH 
    SOUTH 
    EAST 
    WEST 
}

model User {
  id String @id @default(uuid()) 
  name String 
  email String @unique 
  password String 
  role Role @default(USER) 
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  vehicles Vehicle[] 
  slotRequests SlotRequest[] 
  logs Log[] 
  }

model Vehicle {
     id String @id @default(uuid()) 
     userId String 
     plateNumber String @unique 
     vehicleType VehicleType 
     size Size 
     attributes Json? 
     slotRequest SlotRequest[]

     User User[]
}

model ParkingSlot { 
    id String @id @default(uuid())
    slotNumber String @unique 
    size Size 
    vehicleType VehicleType 
    status SlotStatus @default(AVAILABLE) 
    location Location 
    createdAt DateTime @default(now()) 
    updatedAt DateTime @updatedAt 
    slotRequests SlotRequest[] 
}

model SlotRequest { 
    id String @id @default(uuid())
    userId String 
    vehicleId String 
    slotId String? 
    slotNumber String? 
    status RequestStatus @default(PENDING) 
    rejectionReason String? 
    preferredLocation Location? 
    startDate DateTime? 
    endDate DateTime? 
    notes String? 
    createdAt DateTime @default(now()) 
    updatedAt DateTime @updatedAt 
    user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
    vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade) 
    slot ParkingSlot? @relation(fields: [slotId], references: [id], onDelete: SetNull) 
}


model Log {
    id String @id @default(uuid()) 
    userId String? 
    action String 
    createdAt DateTime @default(now()) 
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull) 
}

